""" Auto-generate a list of .ics holiday calendar files

This script automatically generates holiday calendar files using the
holidays (https://github.com/dr-prodigy/python-holidays) and
icalendar (https://github.com/collective/icalendar) packages.
The names of the countries are queried from the pycountry
(https://github.com/flyingcircusio/pycountry) package.

Calendars are created for all countries and subdivisions supported by
the holidays package, for a range of predefined years.

Note that since the holidays package does not implement recurring event
definitions, and creates a individual holiday events for each year, the
output calendar will also not include recurring events. While this makes the
output file larger and leads to a need to update the calendar every once in
a while, it also avoids the pitfalls of events recurring in a non-standard
frequency.

Subdivision calendar files do not include the country's general events to allow
users to tailor their calendar needs individually (this is contrary to the
holidays package's way, where subdivision calendars include all events from its
parent).

This script also regenerates the calendars.json file used by the website to
list all available country calendars.
"""

# imports
import holidays
import pycountry
import json
from icalendar import Calendar, Event
from datetime import timedelta


# date range
ALL_YEARS = list(range(2022, 2031))


# utility function
def hol2cal(hol: holidays.HolidayBase, name: str) -> Calendar:
    """Convert a holidays object into a calendar object"""
    # instantiate calendar and add required components
    cal = Calendar()
    cal.add("prodid", f"-//Thunderbird Website//{name} Holiday Calendar//")
    cal.add("version", "2.0")
    # add all holidays to calendar
    for day, desc in hol.items():
        # create event
        ev = Event()
        # the event title is the holiday's description (no detailed summary available)
        ev.add("summary", desc)
        # the standard way of defining an all-day event is to set the start date without
        # a time, and ending it the day after
        ev.add("dtstart", day, parameters={"value": "DATE"})
        ev.add("dtend", day + timedelta(days=1), parameters={"value": "DATE"})
        # add to calendar object
        cal.add_component(ev)
    # return
    return cal


# main script
if __name__ == "__main__":
    # get dictionary of all supported countries (and subdivisions, where available)
    supp_countries = holidays.utils.list_supported_countries()
    # initialize list for calendars.json
    overview = []
    # loop over all countries in holidays
    for country, subcountries in supp_countries.items():
        # instantiate holiday object from country code
        hol = holidays.country_holidays(country, years=ALL_YEARS)
        # get full country name from country code
        country_details = pycountry.countries.get(alpha_2=country)
        # convert the country holiday object into a calendar
        cal = hol2cal(hol, country_details.name)
        # save the calendar file
        fname = f"{country}_Holidays.ics"
        with open(f"media/caldata/{fname}", "wb") as f:
            f.write(cal.to_ical())
        # add its info the list of all country calendars
        overview.append({"country": country_details.name,
                         "filename": fname,
                         "datespan": f"{ALL_YEARS[0]}-{ALL_YEARS[-1]}",
                         "authors": "autogenerated"})
        # loop over all available subdivisions (if any)
        for subcountry in subcountries:
            # instantiate holiday object from country and subdivision code
            hol_sub = holidays.country_holidays(country, subdiv=subcountry, years=ALL_YEARS)
            # remove all holidays that are in the country-wide object
            for desc in hol.values():
                try:
                    hol_sub.pop_named(desc)
                except KeyError:
                    pass
            # get a full subdivision name
            try:
                # the name of the subdivision code is a standard ISO 3166-1 alpha-2 code,
                # we can use it to look up the full name
                subcountry_details = pycountry.subdivisions.get(code=f"{country}-{subcountry}")
                subcountry_name = subcountry_details.name
            except AttributeError:
                # the subdivision code is non-standard, we have to use it directly
                subcountry_name = subcountry
                # since it's non-standard, let's make sure it's an easy filename
                subcountry = "".join(c for c in subcountry if c.isalpha())
            # convert the subdivision holiday object into a calendar
            cal_sub = hol2cal(hol_sub, f"{country_details.name}, {subcountry_name}")
            # save the calendar file
            with open(f"media/caldata/{country}_{subcountry}_Holidays.ics", "wb") as f:
                f.write(cal_sub.to_ical())
    # save the calendar overview file
    with open("media/caldata/calendars.json", "wt") as f:
        json.dump(overview, f, indent=0)
